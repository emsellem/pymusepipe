==============================
Reduce to Prealign
==============================

Basic Usage - The reduction worksflow up to prealign
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
The pymusepipe wrapper consists of wrappers around the esorex recipes and closely mirrors 
the esoreflex worksflow up to the pipeline stage just before alignment of different exposures.


The prealign workflow
""""""""""""""""""""""""""""""""""""""""""""""
``run_recipes()`` launches a default set of functions listed below::

  # generate the master bias using the muse_bias esorex recipe
  mypipe.run_bias()
  # generate the master flat using the muse_flat esorex recipe
  mypipe.run_flat()
  # generate the wavelength calibration using the muse_wavecal esorex recipe
  mypipe.run_wave()
  # generate the lsf using the muse_lsf esorex recipe
  mypipe.run_lsf()
  # generate the illumination correction using the muse_lsf esorex recipe
  mypipe.run_twilight(illum=True)
  # process individual exposures to remove the instrumental signature usign the muse_scibasic 
  # esorex recipes. It runs on both the object, standard star and sky exposures
  mypipe.run_scibasic_all(illum=True)
  # generates the response function using the standard star observations and the muse_standard 
  # esorex recipe
  mypipe.run_standard()
  # uses the sky exposures to generate a sky spectrum
  mypipe.run_sky(fraction=0.8)
  # runs the esosex muse_scipost recipe individually on each object exposures generating 
  # a datacubes and image in the requested filter for each exposure. 
  # These images are then used for aligment.
  mypipe.run_prep_align()
    
Individual pipeline stages can be (re)run by calling any of the individual functions
above. The order is important, as in any data reduction process. This is equivalent to::

  mypipe.run_recipes(last='prep_align')

An example of how to run this within the :py:func:`pymusepipe.target_sample` class 
is found in :doc:`mosaicking`.

The next step of the standard pymusepipe workflow is the :doc:`alignment`.

The deprecated exp_align workflow
""""""""""""""""""""""""""""""""""""""""""""""
  Users who may wish for whatever reason to exacly replicate the esoreflex workflow can 
  access the run_align recipe as follows::

  # aligns the individual exposures with respect to each other using point sources in 
  the overlap region
  mypipe.run_align_bydataset()

The output of this routine is a fits file containing the OFFSET_LIST. This file contains, 
for each OBJECT exposure, a list of offsets in RA and DEC, and optionally a FLUX_SCALE column 
which can be use to fix multiplicative flux offsets (although these are set to nan and therefore
not used, if required the user has to change their values manually).

If the final alignment is satisfactory, a combined datacube can be generated by::

  # offset_list=True is necessary otherwise scipost defaults to not using any offset list
  mypipe.run_scipost(offset_list=True)

It is also possible to generate the so-called `fully reduced` pixeltables (on a per-exposure basis), 
which are useful for later combination (e.g. in a mosaic of several OBs) by doing::

  mypipe.run_scipost_perexpo()

In this case the final datacubes can be obtained using the `muse_exp_combine` recipe as::

  mypipe.combine_dataset()